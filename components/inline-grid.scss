/***
    title: Inline Grid
    section: Grid
    description: Uses inline-block to create a grid. Useful if you dynamically toggle elemens in the grid and need them to adapt to new positions. Note that @inline-grid sets the child element's font-size back to $font-size-default.
    example:
        <ul class="inline-grid inline-grid--2--bp-medium"><li>Two column grid</li><li>Two column grid</li><li>Two column grid</li><li>Two column grid</li></ul>
***/
// TODO: Deprecate
@mixin inline-grid ($num, $bp: false, $gutter: $gutter-default) {
	font-size: 0;

	@if ($bp) {
		@media #{$bp} {
			margin-left: -#{$gutter / 2};
			margin-right: -#{$gutter / 2};
		}
	}
	@else {
		margin-left: -#{$gutter / 2};
		margin-right: -#{$gutter / 2};
	}

	> * {
		font-size: $font-size-default;
		display: inline-block;
		vertical-align: top;
		width: 100%;

		@if ($bp) {
			@media #{$bp} {
				margin: 0 #{$gutter / 2};
				width: calc(#{100% / $num} - #{$gutter});
			}
		}
		@else {
			margin: 0 #{$gutter / 2};
			width: calc(#{100% / $num} - #{$gutter});
		}
	}
}

.inline-grid {
	@include inline-grid(1);
}

ul.inline-grid,
ul[class*="inline-grid--"] {
	margin-left: 0;
	padding-left: 0;
	list-style: none;
}

@each $num in $col-nums {
	.inline-grid--#{nth($num, 1)} > * {
		width: calc(#{100% / nth($num, 2)} - #{$gutter-default});
	}
}

@each $bp in $col-breakpoints {
	@each $num in $col-nums {
		@media #{nth($bp, 2)} {
			.inline-grid--#{nth($num, 1)}--#{nth($bp, 1)} > * {
				width: calc(#{100% / nth($num, 2)} - #{$gutter-default});
			}
		}
	}
}
